#define  nMADS 18 // number of MA grid divisions
#define  nX 45    // Number of X grid divisions

double DsDxBilinearInterp(double MAtest, double Xtest) {

  double NormDsDx[nMADS][nX];

  // mass of A' in GeV
  double MMAA[nMADS] = {0.000001, 0.00001, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007, 0.0001, 0.00015, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009};

  // Fraction carried out by A'
  double XX00[nX] = {0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99,0.9999,0.99991,0.99992,0.99993,0.99994,0.99995,0.99996,0.99997,0.99998,0.99999};

  double NormOnMaxDPDsDxETL1keVEe20GeV[nX]={0.2855,0.143006,0.094602,0.07031,0.0557204,0.0459936,0.039049,0.0338446,0.0298006,0.0265694,0.0169317,0.012144,0.00932487,0.00747791,0.0061913,0.00525224,0.00454635,0.00400276,0.00357777,0.00324134,0.00297329,0.00275875,0.00258715,0.00245025,0.00234192,0.00225699,0.00224244,0.00222851,0.00221533,0.00220255,0.00219065,0.0021782,0.00216822,0.00215164,0.00212846,0.00101903,0.000946301,0.000857959,0.000754003,0.000634432,0.000499246,0.000348445,0.0000912595,0.,0.};
double NormOnMaxDPDsDxETL10keVEe20GeV[nX]={1.,0.988653,0.798588,0.640649,0.526131,0.442688,0.380156,0.331904,0.293698,0.262773,0.168816,0.121419,0.0933476,0.0749078,0.0620433,0.0526462,0.0455784,0.0401336,0.0358758,0.0325046,0.0298183,0.0276682,0.0259482,0.0245761,0.0234903,0.0226391,0.0224933,0.0223537,0.0222216,0.0220935,0.0219743,0.0218495,0.0217495,0.0215833,0.0213509,0.010222,0.00949251,0.00860634,0.00756353,0.00636409,0.00500802,0.00349531,0.000915439,0.,0.};
double NormOnMaxDPDsDxETL20keVEe20GeV[nX]={0.674374,0.956237,1.,0.936203,0.841599,0.747793,0.664598,0.593519,0.533414,0.482547,0.317979,0.230689,0.178028,0.143147,0.118703,0.1008,0.0873126,0.0769107,0.0687703,0.0623218,0.0571816,0.0530663,0.0497738,0.0471473,0.0450688,0.0434396,0.0431604,0.0428934,0.0426406,0.0423955,0.0421673,0.0419285,0.0417372,0.0414188,0.0409734,0.0196169,0.0182169,0.0165162,0.014515,0.0122132,0.00961078,0.00670778,0.0017568,0.,0.};
double NormOnMaxDPDsDxETL30keVEe20GeV[nX]={0.505381,0.805148,0.956119,1.,0.979558,0.927039,0.862216,0.795659,0.732373,0.674348,0.463656,0.34137,0.265138,0.213914,0.177736,0.151121,0.131012,0.115475,0.103301,0.0936485,0.0859501,0.0797843,0.0748503,0.0709138,0.067799,0.0653579,0.0649396,0.0645396,0.064161,0.0637939,0.0634522,0.0630943,0.0628081,0.0623305,0.0616615,0.0295225,0.0274155,0.0248562,0.0218444,0.0183803,0.0144638,0.0100949,0.0026439,0.,0.};
double NormOnMaxDPDsDxETL40keVEe20GeV[nX]={0.406476,0.68149,0.861368,0.961318,1.,0.996532,0.966985,0.923115,0.872771,0.820757,0.596553,0.448382,0.351441,0.284909,0.237382,0.202193,0.175498,0.154819,0.138587,0.125702,0.115416,0.107174,0.100576,0.0953121,0.0911469,0.0878836,0.0873246,0.08679,0.0862841,0.0857937,0.0853371,0.0848588,0.0844768,0.0838372,0.0829402,0.0397116,0.0368775,0.0334348,0.0293836,0.0247239,0.0194557,0.0135789,0.00355639,0.,0.};
double NormOnMaxDPDsDxETL50keVEe20GeV[nX]={0.340044,0.58627,0.766948,0.889692,0.962789,0.996174,1.,0.983306,0.953397,0.915717,0.708269,0.546199,0.43316,0.353346,0.295465,0.252242,0.219277,0.193654,0.173494,0.157466,0.144658,0.134388,0.126164,0.119601,0.114408,0.110342,0.109646,0.10898,0.10835,0.107739,0.107171,0.106575,0.1061,0.105301,0.104179,0.0498827,0.0463226,0.0419982,0.0369094,0.0310562,0.0244387,0.0170568,0.00446726,0.,0.};
double NormOnMaxDPDsDxETL60keVEe20GeV[nX]={0.292963,0.514159,0.686947,0.816592,0.907251,0.964066,0.992969,1.,0.990742,0.969948,0.798908,0.634408,0.510255,0.419408,0.352256,0.301569,0.262652,0.232273,0.208303,0.18921,0.173933,0.161672,0.151849,0.144009,0.137808,0.132953,0.132122,0.131328,0.130576,0.129848,0.12917,0.128459,0.127893,0.126937,0.125591,0.0601383,0.0558463,0.0506327,0.0444977,0.0374412,0.0294631,0.0205636,0.0053857,0.,0.};
double NormOnMaxDPDsDxETL70keVEe20GeV[nX]={0.25813,0.458746,0.62159,0.751096,0.849759,0.920386,0.966398,0.991635,1.,0.995184,0.870016,0.712844,0.582624,0.483157,0.407914,0.350375,0.305838,0.270894,0.243227,0.221139,0.203439,0.189219,0.177821,0.168722,0.161526,0.155896,0.154933,0.154012,0.153142,0.152297,0.151513,0.150688,0.150034,0.148922,0.147352,0.0705626,0.0655266,0.0594094,0.0522109,0.0439312,0.0345703,0.0241281,0.00631926,0.,0.};
double NormOnMaxDPDsDxETL100keVEe20GeV[nX]={0.19201,0.349342,0.484577,0.601321,0.700953,0.784315,0.85223,0.905673,0.945816,0.973973,0.983632,0.884595,0.763805,0.65438,0.563535,0.490265,0.431646,0.384687,0.346989,0.316617,0.29213,0.272385,0.256525,0.243858,0.23385,0.226041,0.224709,0.223435,0.222233,0.221067,0.219985,0.218844,0.217949,0.216386,0.214156,0.102578,0.0952567,0.086364,0.0758995,0.0638633,0.0502552,0.0350752,0.00918637,0.,0.};
double NormOnMaxDPDsDxETL150keVEe20GeV[nX]={0.136012,0.25286,0.357022,0.451198,0.53655,0.613646,0.682805,0.744256,0.798221,0.844929,0.9809,0.994033,0.938269,0.855254,0.768051,0.687584,0.61752,0.55829,0.509028,0.468413,0.435174,0.408135,0.386324,0.368905,0.355199,0.344595,0.3428,0.341088,0.339477,0.337915,0.336475,0.334939,0.333775,0.33158,0.328355,0.157368,0.146137,0.132495,0.116441,0.0979755,0.0770987,0.0538106,0.0140932,0.,0.};
double NormOnMaxDPDsDxETL200keVEe20GeV[nX]={0.106277,0.200301,0.285599,0.364167,0.436985,0.504574,0.56723,0.625129,0.678388,0.727094,0.905424,0.9877,0.997355,0.961264,0.901479,0.833729,0.767031,0.706089,0.652713,0.607229,0.569222,0.537955,0.51264,0.492486,0.476792,0.464884,0.462901,0.46102,0.459263,0.457562,0.456017,0.45433,0.453137,0.450533,0.446518,0.214172,0.198887,0.18032,0.158472,0.133341,0.104929,0.0732343,0.0191804,0.,0.};
double NormOnMaxDPDsDxETL300keVEe20GeV[nX]={0.0744023,0.142726,0.205979,0.265261,0.321232,0.374297,0.42471,0.472641,0.518198,0.561459,0.744649,0.874823,0.95571,0.994035,0.998693,0.979772,0.946396,0.906272,0.864863,0.82586,0.791319,0.762237,0.738869,0.721033,0.708313,0.700115,0.698959,0.697922,0.697039,0.696208,0.695581,0.694704,0.694556,0.6922,0.687636,0.330586,0.306993,0.278335,0.244611,0.20582,0.161964,0.113042,0.0296063,0.,0.};
double NormOnMaxDPDsDxETL400keVEe20GeV[nX]={0.0570091,0.110619,0.160907,0.208495,0.25382,0.297179,0.338776,0.378754,0.417216,0.454236,0.619148,0.752111,0.854166,0.926732,0.972371,0.995085,0.999724,0.991716,0.976147,0.957571,0.939472,0.924391,0.913859,0.908651,0.908924,0.914361,0.916014,0.917805,0.919778,0.9218,0.924073,0.925988,0.928867,0.928743,0.925616,0.446431,0.414573,0.375873,0.330331,0.277948,0.218723,0.152657,0.0399816,0.,0.};
double NormOnMaxDPDsDxETL500keVEe20GeV[nX]={0.039721,0.0777158,0.113707,0.148001,0.180851,0.212444,0.242916,0.27237,0.300882,0.32851,0.454616,0.562309,0.652441,0.725423,0.781874,0.823017,0.850717,0.867566,0.876539,0.880916,0.883787,0.887968,0.895638,0.90837,0.92702,0.951771,0.957425,0.963262,0.969332,0.975491,0.981959,0.988075,0.995271,0.999246,1.,0.484299,0.44974,0.407759,0.358355,0.301529,0.23728,0.165609,0.0433739,0.,0.};
double NormOnMaxDPDsDxETL600keVEe20GeV[nX]={0.027743,0.0546355,0.0803062,0.1049,0.12856,0.1514,0.173511,0.19496,0.215802,0.236078,0.329933,0.41267,0.485152,0.547736,0.600665,0.644386,0.679647,0.707612,0.729885,0.748526,0.765821,0.784218,0.806194,0.833753,0.86855,0.911584,0.92121,0.931141,0.94142,0.951914,0.962844,0.97355,0.98547,0.994287,0.999999,0.486735,0.452005,0.409814,0.360163,0.303051,0.238479,0.166447,0.0435931,0.,0.};
double NormOnMaxDPDsDxETL700keVEe20GeV[nX]={0.0204739,0.0405412,0.0598153,0.0783646,0.0962725,0.113612,0.130443,0.146813,0.162762,0.178319,0.250989,0.316328,0.375168,0.427913,0.474804,0.516121,0.55227,0.583923,0.612051,0.638044,0.663643,0.69108,0.722695,0.761167,0.80902,0.868531,0.881978,0.895946,0.910468,0.925442,0.941078,0.956746,0.973886,0.988177,0.99962,0.489428,0.454508,0.412086,0.362161,0.304734,0.239804,0.167372,0.0438356,0.,0.};
double NormOnMaxDPDsDxETL800keVEe20GeV[nX]={0.0157233,0.0312855,0.0463084,0.0608217,0.0748753,0.0885168,0.101788,0.114722,0.127347,0.139688,0.197704,0.250569,0.299045,0.343561,0.384399,0.421828,0.456178,0.487949,0.517858,0.546976,0.576748,0.60917,0.64671,0.692507,0.750109,0.823546,0.840465,0.858212,0.876795,0.896188,0.916575,0.937401,0.96009,0.980368,0.998236,0.492065,0.45696,0.414312,0.36412,0.306384,0.241104,0.16828,0.0440732,0.,0.};
double NormOnMaxDPDsDxETL900keVEe20GeV[nX]={0.0124475,0.0248781,0.0369287,0.0486089,0.0599488,0.07098,0.0817315,0.0922279,0.102491,0.112538,0.159999,0.203665,0.244216,0.282079,0.317556,0.350938,0.382547,0.412832,0.442412,0.472216,0.503533,0.538257,0.578924,0.629112,0.69341,0.777937,0.797853,0.818981,0.841286,0.864873,0.889876,0.915892,0.944301,0.970961,0.995869,0.494648,0.459363,0.416493,0.366039,0.308,0.242377,0.169169,0.0443062,0.,0.};


  // initialize DsDx matrix
  for (int j = 0; j < nX; j++) {
    NormDsDx[0][j] = NormOnMaxDPDsDxETL1keVEe20GeV[j];
    NormDsDx[1][j] = NormOnMaxDPDsDxETL10keVEe20GeV[j];
    NormDsDx[2][j] = NormOnMaxDPDsDxETL20keVEe20GeV[j];
    NormDsDx[3][j] = NormOnMaxDPDsDxETL30keVEe20GeV[j];
    NormDsDx[4][j] = NormOnMaxDPDsDxETL40keVEe20GeV[j];
    NormDsDx[5][j] = NormOnMaxDPDsDxETL50keVEe20GeV[j];
    NormDsDx[6][j] = NormOnMaxDPDsDxETL60keVEe20GeV[j];
    NormDsDx[7][j] = NormOnMaxDPDsDxETL70keVEe20GeV[j];
    NormDsDx[8][j] = NormOnMaxDPDsDxETL100keVEe20GeV[j];
    NormDsDx[9][j] = NormOnMaxDPDsDxETL150keVEe20GeV[j];
    NormDsDx[10][j] = NormOnMaxDPDsDxETL200keVEe20GeV[j];
    NormDsDx[11][j] = NormOnMaxDPDsDxETL300keVEe20GeV[j];
    NormDsDx[12][j] = NormOnMaxDPDsDxETL400keVEe20GeV[j];
    NormDsDx[13][j] = NormOnMaxDPDsDxETL500keVEe20GeV[j];
    NormDsDx[14][j] = NormOnMaxDPDsDxETL600keVEe20GeV[j];
    NormDsDx[15][j] = NormOnMaxDPDsDxETL700keVEe20GeV[j];
    NormDsDx[16][j] = NormOnMaxDPDsDxETL800keVEe20GeV[j];
    NormDsDx[17][j] = NormOnMaxDPDsDxETL900keVEe20GeV[j];
  }

  // bounds for X

  if (Xtest < XX00[0]) return 0.; // Because the total cross section is obtained from the integration above this

  if (Xtest == XX00[0])
    Xtest = 1.00005 * XX00[0]; //  Lower limit for X

  if (Xtest >= XX00[nX-1] )
    Xtest  = 0.99995 * XX00[nX-1]; // Upper limit for X

  // bounds for mass of Dark state MA
  if (MAtest <= MMAA[0])
    MAtest = 1.00005 * MMAA[0]; //  Lower limit for mass

  if (MAtest >= MMAA[nMADS-1] )
    MAtest  = 0.99995 * MMAA[nMADS-1]; // Upper limit for mass

  return BilinearInterpolation<nX> (MAtest, Xtest, MMAA, XX00, NormDsDx, nMADS, 0);
}
